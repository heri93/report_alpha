
spring.profiles.active=Kafka
eureka.client.service-url.defaultZone= ${EUREKA_URI:http://localhost:8761/eureka}
eureka.client.prefer-same-zone-eureka=true


## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url=jdbc:postgresql://localhost:5432/ecommerce-order-v2
spring.datasource.username= postgres
spring.datasource.password= 123456
#spring.datasource.hikari.maximum-pool-size=500
#spring.datasource.hikari.minimum-idle=10


# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true


# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update
spring.jpa.show-sql= true

# SPRING CLOUD STREAM
kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.properties.spring.json.trusted.packages=*

spring.cloud.stream.default-binder= kafka
spring.cloud.stream.kafka.binder.brokers= localhost:9092

#spring.cloud.stream.bindings.output.destination: app.order.v2
#spring.cloud.stream.bindings.output.contentType: application/json
#spring.cloud.stream.bindings.output.consumer.concurrency=20

#spring.cloud.stream.bindings.order-input.destination: order.update.v2
#spring.cloud.stream.bindings.order-input.contentType: application/json
#spring.cloud.stream.bindings.order-input.consumer.concurrency=20

#spring.cloud.stream.bindings.customer-output.destination: customer.find.id.v2
#spring.cloud.stream.bindings.customer-output.contentType: application/json
#spring.cloud.stream.bindings.customer-output.consumer.concurrency=20

#spring.cloud.stream.bindings.order-aggregator-output.destination: order.aggregator.update
#spring.cloud.stream.bindings.order-aggregator-output.contentType: application/json
#spring.cloud.stream.bindings.order-aggregator-output.consumer.concurrency=20

#spring.cloud.stream.bindings.product-output.destination: get.info.from.order
#spring.cloud.stream.bindings.product-output.contentType: application/json
#spring.cloud.stream.bindings.product-output.consumer.concurrency=20

#spring.cloud.stream.bindings.update-product-output.destination: product.update
#spring.cloud.stream.bindings.update-product-output.contentType: application/json
#spring.cloud.stream.bindings.update-product-output.consumer.concurrency=20

spring.cloud.stream.bindings.order-created-sync-input.destination: order.created.sync.response
spring.cloud.stream.bindings.order-created-sync-input.content-type: application/json
spring.cloud.stream.bindings.order-created-sync-input.consumer.concurrency=20

spring.cloud.stream.bindings.order-created-sync-output.destination: order.created.sync.request
spring.cloud.stream.bindings.order-created-sync-output.content-type: application/json
spring.cloud.stream.bindings.order-created-sync-output.consumer.concurrency=20

spring.cloud.stream.bindings.order-confirm-sync-input.destination: order.confirm.sync.response
spring.cloud.stream.bindings.order-confirm-sync-input.content-type: application/json
spring.cloud.stream.bindings.order-confirm-sync-input.consumer.concurrency=20

spring.cloud.stream.bindings.order-confirm-sync-output.destination: order.confirm.sync.request
spring.cloud.stream.bindings.order-confirm-sync-output.content-type: application/json
spring.cloud.stream.bindings.order-confirm-sync-output.consumer.concurrency=20